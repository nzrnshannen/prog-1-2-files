STATIC MEMORY ALLOCATION
- memory allocated during compile time
- fixed and cannot be increased nor decreased during runtime
example:
	int arr[5] = {1, 2, 3, 4, 5}
	- size is fixed

PROBLEMS IN STATIC MEMORY ALLOCATION
1. If you are allocating memory for an array during compile 
time, then you have to fix the size at the time of declaration.
Size is fixed and user cannot increase or decrease the size 
of the array at runtime.

2. If the values stored by the user in the array at runtime
is less than the size specified, then there will be
wastage of memory

3. If the values stored by the user in the array at run time
is more than the size specified, then the program may crash
or misbehave


DYNAMIC MEMORY ALLOCATION
- process of allocating memory at the time of execution 
is called dynamic memory allocation

Heap - the segment of memory where dynamic memory allocation
	takes place
	- an area of memory where memory is allocated or 
		deallocated without any order or randomly

Note: Allocated memory can only be accessed through POINTERS.

Built-in Functions: (header file: <stdlib.h>
- malloc()
- calloc()
- realloc()
- free()

Most of these functions returns a void pointer since
they only allocate some memory, but they don't have any
idea what data type are they pointing to.
It is important to TYPECAST.
---------------------------------------------
a.) malloc()
	- "memory allocation"
	- allocates single large block of contiguous memory
		according to the size specified
Syntax: 
	(void*) malloc (size_t size)//1 argument

size_t is unsigned int.

Definition:
	malloc() simply allocates a memory block according to
	the size specified in the heap and on success, it 	
	retuns a pointer pointing to the first byte of the
	allocated memory, else returns NULL
example:
	int *ptr = (int*)malloc(4)
- we want to allocate 4 bytes of memory in the heap, and
the address of the first byte is stored in the pointer ptr

-----
b.) calloc()
	- same with malloc, but calloc() needs two arguments
	instead of just one

Syntax: void* calloc(size_t n, size_t size) //2 arguments
	- size_t n: number of blocks
	- size_t size: size of each block

				MALLOC VS. CALLOC
calloc: 
	int *ptr = (int*)calloc(10, sizeof(int));
malloc:
	int *ptr = (int*)malloc(10 * sizeof(int));

Memory allocated by calloc is initialized to zero.
Memory allocated by malloc is initialized with some garbage	value

NOTE: malloc and calloc both return NULL when sufficient 	
	memory is not available in the heap.

calloc - clear allocation
malloc - memory allocation
--------------
c.) realloc()
	- used to change the size of the memory block without
	losing the old data

Syntax:
	void *realloc(void *ptr, size_t newSize)
- void *ptr: pointer to the previously allocated memory
- size_t newSize: new size
example:

	int *ptr = (int*)malloc(sizeof(int)); //4 bytes
	ptr = (int*)realloc(ptr, 2*sizeof(int));//8 bytes
- this function allocates a new memory but the data of the
old block is not lost
- we may lose the data when the new size is smaller than
the old size
- newly allocated bytes are uninitialized

ANOTHER EXAMPLE:
goal: to store 2 more integers

Correct: 	
	int *ptr = (int*)malloc(2*sizeof(int))
	ptr = (int*)realloc(ptr, 4*sizeof(int))

Wrong:
	int *ptr = (int*)malloc(2*sizeof(int))
	ptr = (int*)realloc(ptr, 2*sizeof(int))

--------------------------------------
d.) free() //for deallocating
	- releases the dynamically allocated memory in heap
Syntax: void free(ptr)
	- returns nothing
Note:
The memory allocated in heap will not be released
automatically after using the memory. The space remains there
and can't be used.
It's our responsibility to release the memory after use.

Good practice:
after using free(), set the pointer to NULL
	free(ptr)
	ptr = NULL;

